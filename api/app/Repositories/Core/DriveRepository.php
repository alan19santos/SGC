<?php


namespace App\Repositories\Core;

use App\Models\Drive;
use App\Repositories\Core\BaseRepository;
use App\Exceptions\CredentialsException;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Support\Facades\DB;

class DriveRepository extends  BaseRepository {

    public function __construct(private readonly Drive $drive)
    {
        parent::__construct($drive);
    }

    public function getAll(): Collection
    {
        return $this->drive->all();
    }

    public function findWhere(string $column, string $value): Collection
    {
        return parent::findWhere($column, $value); // TODO: Change the autogenerated stub
    }

    public function paginate(int $totalPage = 10): LengthAwarePaginator
    {
        return parent::paginate($totalPage); // TODO: Change the autogenerated stub
    }

    public function applyFilter(array $items)
    {
        $relationship = $this->drive;

        foreach ($items as $key => $value) {
            if ($value) {
                if (in_array($key, ['description', 'plate_number','model','color'])) {
                    if ($key == 'description') {
                        $relationship->whereRaw("UPPER(drive.description) like UPPER('%{$value}%')");
                    }
                    if ($key == 'plate_number') {
                        $relationship->whereRaw("UPPER(drive.plate_number) like UPPER('%{$value}%')");
                    }
                    if ($key == 'model') {
                        $relationship->whereRaw("UPPER(drive.model) like UPPER('%{$value}%')");
                    }
                    if ($key == 'color') {
                        $relationship->whereRaw("UPPER(drive.color) like UPPER('%{$value}%')");
                    }
                    
                }
            }
        }
    }

}