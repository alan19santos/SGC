<?php



namespace App\Repositories\Core;

use App\Models\Tower;
use App\Exceptions\CredentialsException;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Support\Facades\DB;

class TowerRepository extends BaseRepository {

    public function __construct(private readonly Tower $tower) {
        parent::__construct($tower);
    }

    public function getAll(): Collection {
        return parent::getAll();
    }

    public function findWhere(string $column, string $value): Collection {
        return parent::findWhere($column, $value); // TODO: Change the autogenerated stub
    }

    public function paginate(int $totalPage = 10): LengthAwarePaginator   {
        return parent::paginate($totalPage); // TODO: Change the autogenerated stub
    }

    public function store(array $data): void
    {
        try {
            DB::beginTransaction();
            $this->tower->create($data);
            DB::commit();
        } catch (\Exception $th) {
            DB::rollback();
            throw new CredentialsException($th->getMessage());
        }
    }

    public function applyFilter(array $items)
    {
        $relationship = $this->loadRelationships($this->tower, ['condominium']);

        foreach ($items as $key => $value) {
            if ($value) {
                if (in_array($key, ['name', 'capacity','type','condominium_id'])) {
                    if ($key == 'name') {
                        $relationship->whereRaw("UPPER(tower.name) like UPPER('%{$value}%')");
                    }
                    if ($key == 'capacity') {
                        $relationship->where("tower.capacity", $value);
                    }
                    if ($key == 'type') {
                        $relationship->where("tower.type", $value);
                    }
                    if ($key == 'condominium_id') {
                        $relationship->where("tower.condominium_id", $value);
                    }
                }
            }
        }

        return $relationship->orderBy('name')->get();
    }

    private function loadRelationships($query, $relationships = [])
    {

        return $query->with(
            $relationships
        );
    }
}
