<?php


namespace App\Repositories\Core;

use App\Models\Occurrence;
use App\Models\TypeOccurrence;
use App\Models\HistoricOccurrence;
use App\Exceptions\CredentialsException;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
class OccurrentRepository extends BaseRepository {

  

    public function __construct(private Occurrence $occurrence){
            parent::__construct($occurrence);
    }

    function getEntity()  {

    }

    public function getAll(): Collection
    {
        // return $this->occurrence->all();
        return $this->loadRelationships($this->occurrence, ['user','typeOccurrence'])->get();
    }

    public function findById($id): object {

        return $this->loadRelationships($this->occurrence, ['user','typeOccurrence'])->where('user_id', $id)->get();
    }

    public function findWhere(string $column, string $value): Collection
    {
        return parent::findWhere($column, $value); // TODO: Change the autogenerated stub
    }

    public function paginate(int $totalPage = 10): LengthAwarePaginator
    {
        return parent::paginate($totalPage); // TODO: Change the autogenerated stub
    }

    public function store(array $data): void
    {
        try {
            DB::beginTransaction();
            $this->occurrence->create($data);
            DB::commit();
        } catch (\Exception $th) {
            DB::rollback();
            throw new CredentialsException($th->getMessage());
        }
    }


    public function applyFilter(array $items)
    {
        $relationship = $this->loadRelationships($this->occurrence, ['user']);

        foreach ($items as $key => $value) {
            if ($value) {
                if (in_array($key, ['title','user_id','type_occurrence_id','isResolved','resolution'])) {
                    if ($key == 'title') {
                        $relationship->whereRaw("UPPER(occurrence.title) like UPPER('%{$value}%')");
                    }
                    if ($key == 'type_occurrence_id') {
                        $relationship->where("occurrence.type_occurrence_id", $value);
                    }
                    if ($key == 'isResolved') {
                        $relationship->where("occurrence.isResolved", $value);
                    }
                    if ($key == 'user_id') {
                        $relationship->where("occurrence.user_id", $value);
                    }
                }
            }
        }

        return $relationship->orderBy('date_occurrence')->get();
    }


    private function loadRelationships($query, $relationships = [])
    {        
        return $query->with(
            $relationships
        );
    }

    public function typeOccurrence() {
        return TypeOccurrence::select('id','description')->get();
    }


    /**
     * Summary of storeHistoric
     * Salvando histÃ³rico de observaÃ§Ãµes de ocorrencias
     * @param mixed $array
     * @return void
     */
    public function storeHistoric($array) {

        $data = ['observations' => $array['data']['observations'], 'occurrence_id' => $array['data']['id']];
        $occurrence = $this->occurrence->where('id', $array['data']['id'])->first();
        DB::beginTransaction();
        try {           
            HistoricOccurrence::create($data);

            $occurrence->isResolved = true;
            $occurrence->save();

            DB::commit();
         
        } catch (\Exception $ex) {
          
            DB::rollBack();
            Log::error('Erro ao inserir histÃ³rico: ', [$ex->getMessage()]);
          
        }

        
    }

}

