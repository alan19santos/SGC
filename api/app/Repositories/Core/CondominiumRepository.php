<?php


namespace App\Repositories\Core;

use App\Models\Apartment;
use App\Models\Condominium;
use App\Models\Tower;
use App\Repositories\Core\BaseRepository;
use App\Exceptions\CredentialsException;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Support\Facades\DB;

class CondominiumRepository extends  BaseRepository {

    private $tower;
    private $ap;

    public function __construct(private readonly Condominium $condominium) {
        parent::__construct($condominium);
        $this->tower = new Tower();
        $this->ap = new Apartment();
    }

    public function getAll(): Collection {
        return $this->condominium->all();
    }

    public function findWhere(string $column, string $value): Collection
    {
        return parent::findWhere($column, $value); // TODO: Change the autogenerated stub
    }

    public function findByName(string $value) {
        return $this->condominium->where('name', $value)->first();
    }

    public function paginate(int $totalPage = 10): LengthAwarePaginator
    {
        return parent::paginate($totalPage); // TODO: Change the autogenerated stub
    }

    /**
     * antes de criar condominio
     * verificar o padrÃ£o nome torres
     * listar de acordo e salvar a torre na base de dados
     * dividir a quantidade pelas torres pra saber capacidade de APs por torres.
     */
     
    public function store(array $data): void
    {
        try {
            DB::beginTransaction();            
            $condominium = $this->condominium->create($data);
            
            if (isset($data['qtd_tower'])) {
                $div_tower_ap = (intval($data['qtd_ap']) / intval($data['qtd_tower']));
                #ex: 272 / 2 = 136

                for($i = 1; $i < intval($data['qtd_tower']); $i++) {
                    #capacidade da torre
                    #qtd torre * quantidade andar                   
                    
                   $tower = $this->tower->create([
                        'name' => 'Torre '. $i,
                        'capacity' => round($div_tower_ap),
                        'type' => 1,
                        'condominium_id' => $condominium->id
                    ]);

                    // for($j = 1; $j < intval($div_tower_ap); $j++) {
                    //     $this->ap->create([
                    //         'name' => $j,
                    //         'tower_id' =>  $tower->id,
                    //         'type' => ($j == 0 ? 'Terreo' : 'normal'),
                    //     ]);
                        
                    // }
                }
            }                     

            DB::commit();
        } catch (\Exception $th) {
            DB::rollback();
            throw new CredentialsException($th->getMessage());
        }
    }


    public function applyFilter(array $items)
    {
        $relationship = $this->condominium;

        foreach ($items as $key => $value) {
            if ($value) {
                if (in_array($key, ['name', 'address','city','qtd_tower','qtd_ap'])) {
                    if ($key == 'name') {
                        $relationship->whereRaw("UPPER(condominium.name) like UPPER('%{$value}%')");
                    }
                    if ($key == 'address') {
                        $relationship->whereRaw("UPPER(condominium.address) like UPPER('%{$value}%')");
                    }
                    if ($key == 'city') {
                        $relationship->whereRaw("UPPER(condominium.city) like UPPER('%{$value}%')");
                    }
                    if ($key == 'qtd_tower') {
                        $relationship->where("condominium.qtd_tower", $value);
                    }
                    if ($key == 'qtd_ap') {
                        $relationship->where("condominium.qtd_ap", $value);
                    }
                }
            }
        }

        $totalPage = 10;
        return $relationship->orderBy('condominium.name')->paginate($totalPage);
    }


}
