<?php

namespace App\Repositories\Core;
use App\Models\ServiceProvider;
use App\Exceptions\CredentialsException;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

class ServiceProviderRepository extends BaseRepository {


    public function __construct(private ServiceProvider $serviceProvider)
    {
        parent::__construct($serviceProvider);
    }

    public function getEntity(): ServiceProvider {
        return $this->serviceProvider->entity;
    }

    public function getAll(): Collection
    {
        return parent::getAll();
    }

    public function findWhere(string $column, string $value): Collection {
        return parent::findWhere($column, $value); // TODO: Change the autogenerated stub
    }

    public function paginate(int $totalPage = 10): LengthAwarePaginator   {
        return parent::paginate($totalPage); // TODO: Change the autogenerated stub
    }

    public function store(array $data): void
    {
        try {
            DB::beginTransaction();
            $this->serviceProvider->create($data);
            DB::commit();
        } catch (\Exception $th) {
            DB::rollback();
            throw new CredentialsException($th->getMessage());
        }
    }

    private function loadRelationships($query, $relationships = [])
    {
        return $query->with(
            $relationships
        );
    }
}
