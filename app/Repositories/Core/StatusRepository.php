<?php


namespace App\Repositories\Core;

use App\Models\Status;
use App\Repositories\Core\BaseRepository;
use App\Exceptions\CredentialsException;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Support\Facades\DB;

class StatusRepository extends  BaseRepository {

   public function __construct(private Status $model) {
    parent::__construct($model);
   }

    function getEntity() {}
    public function getAll(): Collection {
        return $this->model->all();
    }

    public function findWhere(string $column, string $value): Collection
    {
        return parent::findWhere($column, $value); // TODO: Change the autogenerated stub
    }

    public function paginate(int $totalPage = 10): LengthAwarePaginator
    {
        return parent::paginate($totalPage); // TODO: Change the autogenerated stub
    }

    public function store(array $data): void
    {
        try {
            DB::beginTransaction();
            $this->model->create($data);
            DB::commit();
        } catch (\Exception $th) {
            DB::rollback();
            throw new CredentialsException($th->getMessage());
        }
    }


    public function applyFilter(array $items)
    {
        $relationship = $this->model;

        foreach ($items as $key => $value) {
            if ($value) {
                if (in_array($key, ['description'])) {
                    if ($key == 'description') {
                        $relationship->whereRaw("UPPER(status.description) like UPPER('%{$value}%')");
                    }
                    
                }
            }
        }
    }


}
